nb_bytes = len(symbole)
  dictionnaire = {}

  for byte in liste_bytes:
    if byte in dictionnaire:
      dictionnaire[byte] += 1
    else:
      dictionnaire[byte] = 1

  for cle in dictionnaire:
    dictionnaire[cle] = round(dictionnaire[cle] / nb_bytes * 100 , 1) # todo à enlever round

  return dictionnaire



    # liste_frequence = frequence_bytes(liste_bytes)
  #
  # # trie les bytes dans une liste de fréquence décroissante
  # bytes_sort = frequence_sort(liste_frequence)
  #
  #
  #
  # # Création du mapping basé sur les fréquences (présumé)
  # mapping = {bytes_sort[i]: symboles[i] for i in range(len(bytes_sort))}
  # print(mapping)
  #
  # # Déchiffre le cryptogramme en appliquant le mapping
  # M = substituer(liste_bytes, mapping)



  def frequence_bytes(liste_bytes):
  nb_bytes = len(liste_bytes)
  dictionnaire = {}

  for byte in liste_bytes:
    if byte in dictionnaire:
      dictionnaire[byte] += 1
    else:
      dictionnaire[byte] = 1

  for cle in dictionnaire:
    dictionnaire[cle] = round(dictionnaire[cle] / nb_bytes * 100 , 1) # todo à enlever round

  return dictionnaire